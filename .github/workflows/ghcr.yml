name: Melange, APKO e GitHub Container Registry

on:
  push:
    branches:
      - 'main'

permissions: read-all

jobs:
  build:
    name: Melange, APKO e GitHub Container Registry
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: write

    steps:
    # Checkout do código
    - name: Harden Runner
      uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # Configurar Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

    # Instalar Melange
    - name: Install Melange
      run: |
        wget https://github.com/chainguard-dev/melange/releases/download/v0.11.2/melange_0.11.2_linux_386.tar.gz
        tar -xzf melange_0.11.2_linux_386.tar.gz
        cd melange_0.11.2_linux_386
        sudo mv melange /usr/local/bin/
        melange version

    # Instalar APKO
    - name: Install APKO
      run: |
        wget https://github.com/chainguard-dev/apko/releases/download/v0.14.7/apko_0.14.7_linux_386.tar.gz
        tar -xzf apko_0.14.7_linux_386.tar.gz
        cd apko_0.14.7_linux_386
        sudo mv apko /usr/local/bin/
        apko version

    # Gerar chaves com Melange
    - name: Generate keys with Melange
      run: |
        cd chainguard/environments/prd
        melange keygen

    # Construir pacotes com Melange
    - name: Build packages with Melange
      run: |
        cd chainguard/environments/prd
        melange build melange-prod.yaml --runner docker --signing-key melange.rsa --arch amd64

    # Construir imagem de container com APKO
    - name: Build container image with APKO
      run: |
        cd chainguard/environments/prd
        apko build apko-prod.yaml senhas senhas-prod.tar -k melange.rsa.pub --arch amd64
    
    # Gerar nome único para a tag
    - name: Gerar nome único para a tag
      id: generate-tag
      run: |
        # Obtém os primeiros 5 dígitos do hash do commit e a data
        SHORT_HASH=${GITHUB_SHA:0:5}
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        echo "tag=${SHORT_HASH}-${TIMESTAMP}" >> $GITHUB_ENV
        echo "tag=${SHORT_HASH}-${TIMESTAMP}" >> $GITHUB_OUTPUT

    # Log in no GitHub Container Registry
    - name: Log in to GitHub Container Registry
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: echo $GITHUB_TOKEN | docker login ghcr.io -u nataliagranato --password-stdin
  
    # Load da imagem de container e push para o GitHub Container Registry
    - name: Load Docker image and push
      run: |
        cd chainguard/environments/prd 
        docker load < senhas-prod.tar
        docker images
        docker tag senhas:latest-amd64 ghcr.io/nataliagranato/giropops-senhas:${{ steps.generate-tag.outputs.tag }}
        docker push ghcr.io/nataliagranato/giropops-senhas:${{ steps.generate-tag.outputs.tag }}

    # Scan de segurança com Aqua Security Trivy    
    - name: Aqua Security Trivy
      uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
      with:
        image-ref: ghcr.io/nataliagranato/giropops-senhas:${{ steps.generate-tag.outputs.tag }}
        format: 'sarif'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        output: 'trivy-results.sarif'
    
    # Envio dos resultados do Trivy para a aba de Segurança do GitHub
    - name: Fazer upload dos resultados do Trivy para a aba de Segurança do GitHub
      uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
